var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.046,1,1.822]],["body/controllers/AppController.html",[0,1.641,1,2.859,2,1.448,3,0.513,4,0.513,5,0.441,6,3.032,7,0.589,8,1.194,9,4.385,10,2.271,11,0.041,12,0.948,13,3.693,14,0.948,15,1.641,16,0.645,17,0.441,18,2.473,19,3.032,20,0.513,21,0.513,22,2.596,23,3.693,24,1.056,25,3.693,26,0.032,27,0.032]],["title/modules/AppModule.html",[28,1.161,29,1.613]],["body/modules/AppModule.html",[1,2.752,2,1.534,3,0.395,4,0.395,5,0.339,11,0.041,16,0.757,17,0.339,18,2.539,19,2.336,20,0.395,21,0.395,26,0.027,27,0.027,28,1.534,29,3.146,30,1.24,31,1.706,32,2.336,33,2.336,34,2.336,35,2.845,36,2.845,37,2.539,38,1.494,39,2.132,40,1.549,41,1.549,42,2.845,43,2.407,44,3.214,45,2.845,46,2.845,47,2.845,48,2.845,49,2.336,50,2.845,51,2.845,52,2.845]],["title/injectables/AppService.html",[18,1.44,53,0.299]],["body/injectables/AppService.html",[3,0.539,4,0.539,5,0.464,7,0.62,8,1.232,9,4.466,11,0.04,12,0.998,14,0.998,15,1.694,16,0.539,17,0.464,18,2.333,20,0.539,21,0.539,24,1.111,26,0.033,27,0.033,53,0.484,54,1.235,55,3.191,56,3.887,57,3.887,58,3.887]],["title/modules/AuthModule.html",[28,1.161,35,1.613]],["body/modules/AuthModule.html",[2,1.413,3,0.351,4,0.351,5,0.302,11,0.041,16,0.768,17,0.302,20,0.351,21,0.351,26,0.025,27,0.025,28,1.413,30,1.102,31,1.571,35,3.128,37,2.446,38,1.439,39,1.963,40,1.377,41,1.377,43,2.216,44,2.959,59,2.076,60,2.076,61,2.528,62,2.193,63,2.74,64,2.74,65,1.972,66,2.528,67,2.583,68,2.528,69,1.777,70,3.605,71,1.229,72,1.229,73,2.528,74,1.777,75,1.777,76,1.555,77,2.076,78,2.528,79,2.528,80,2.528,81,2.528,82,2.076,83,2.076,84,2.528,85,2.528,86,2.528]],["title/injectables/AuthService.html",[53,0.299,62,1.291]],["body/injectables/AuthService.html",[3,0.366,4,0.366,5,0.314,7,0.42,8,0.953,11,0.041,12,1.103,14,0.953,15,1.8,16,0.596,17,0.314,20,0.366,21,0.366,24,1.061,26,0.025,27,0.025,53,0.374,54,0.837,62,1.617,65,1.999,69,1.852,74,1.852,87,2.163,88,1.8,89,3.046,90,3.711,91,1.617,92,2.634,93,5.241,94,2.634,95,1.366,96,1.366,97,1.103,98,1.366,99,3.711,100,3.279,101,2.634,102,2.642,103,1.434,104,3.711,105,3.829,106,2.634,107,2.609,108,2.609,109,2.021,110,1.454,111,1.032,112,2.634,113,1.852,114,2.163,115,1.62,116,2.163,117,2.634,118,2.163,119,2.634,120,2.634,121,2.163]],["title/injectables/JwtAuthGuard.html",[53,0.299,122,1.44]],["body/injectables/JwtAuthGuard.html",[3,0.569,4,0.569,5,0.489,11,0.04,16,0.688,17,0.489,20,0.569,21,0.569,26,0.034,27,0.034,53,0.5,54,1.304,71,1.993,122,2.411,123,2.522,124,3.367,125,3.367,126,2.522,127,4.101]],["title/injectables/JwtStrategy.html",[53,0.299,63,1.613]],["body/injectables/JwtStrategy.html",[3,0.443,4,0.443,5,0.38,7,0.508,8,1.086,11,0.041,12,1.086,14,0.819,16,0.701,17,0.38,20,0.443,21,0.443,24,0.912,26,0.029,27,0.029,53,0.427,54,1.014,63,2.303,71,1.55,76,1.961,77,2.618,83,2.618,88,1.675,91,2.068,95,1.014,96,1.014,97,0.819,98,1.014,103,1.737,114,2.618,115,1.961,126,1.961,128,2.618,129,3.472,130,3.189,131,4.229,132,3.189,133,3.189,134,2.618,135,2.242,136,2.242,137,2.618,138,2.618,139,2.618,140,3.189,141,3.189,142,3.189,143,2.618,144,3.189,145,3.189,146,3.189,147,3.189]],["title/injectables/LocalStrategy.html",[53,0.299,64,1.613]],["body/injectables/LocalStrategy.html",[3,0.406,4,0.406,5,0.349,7,0.467,8,1.025,11,0.041,12,1.025,14,0.751,15,1.86,16,0.677,17,0.349,20,0.406,21,0.406,22,2.057,24,0.837,26,0.027,27,0.027,53,0.403,54,0.93,62,2.297,64,2.174,71,1.422,75,2.057,88,1.603,91,1.275,95,1.269,96,1.269,97,1.025,98,1.269,102,2.793,107,2.806,108,2.806,110,1.147,111,1.147,126,1.799,129,3.277,134,2.402,135,2.057,137,2.402,138,2.402,139,2.402,148,2.402,149,2.927,150,2.927,151,3.992,152,4.006,153,2.927,154,2.402,155,3.277,156,2.927,157,2.927,158,1.594,159,1.275]],["title/controllers/LoginController.html",[0,1.046,67,1.822]],["body/controllers/LoginController.html",[0,0.783,2,0.87,3,0.308,4,0.308,5,0.265,7,0.354,8,0.842,10,2.398,11,0.041,12,1.001,14,1.001,15,1.376,16,0.638,17,0.265,20,0.308,21,0.308,24,1.115,26,0.022,27,0.022,62,1.7,65,1.528,67,2.016,71,1.079,74,1.56,75,1.56,88,1.841,89,2.692,91,0.967,95,1.24,96,1.24,98,1.24,102,1.365,103,2.124,109,1.786,110,0.87,111,0.87,122,1.079,125,1.822,136,1.56,158,1.786,159,1.429,160,1.822,161,1.56,162,1.822,163,3.279,164,3.279,165,2.219,166,2.219,167,2.219,168,3.382,169,2.219,170,2.219,171,2.219,172,2.219,173,3.279,174,2.219,175,2.219,176,1.822,177,1.56,178,1.56,179,1.822,180,2.305,181,3.279,182,1.56,183,2.219,184,2.219,185,2.219,186,2.219,187,2.219,188,2.219,189,1.56,190,2.219,191,2.219,192,2.219,193,1.822,194,2.219,195,2.219,196,3.9,197,3.9,198,3.9,199,3.9,200,2.219,201,2.219,202,2.219,203,1.822,204,3.9,205,2.219]],["title/injectables/PdfService.html",[53,0.299,206,1.44]],["body/injectables/PdfService.html",[3,0.33,4,0.33,5,0.284,7,0.38,8,0.886,11,0.041,12,0.611,14,0.611,16,0.564,17,0.284,20,0.33,21,0.33,24,0.681,26,0.028,27,0.024,53,0.348,54,0.757,88,1.433,95,0.757,96,0.757,97,0.611,98,0.757,110,1.592,111,1.353,159,1.038,193,1.955,203,1.955,206,1.678,207,1.955,208,3.452,209,3.452,210,3.334,211,3.657,212,2.381,213,3.334,214,1.955,215,3.452,216,1.955,217,2.427,218,2.381,219,2.381,220,2.381,221,2.381,222,2.381,223,2.381,224,2.381,225,2.381,226,3.452,227,2.381,228,2.381,229,2.381,230,3.452,231,2.381,232,2.381,233,3.452,234,3.452,235,3.452,236,2.381,237,3.452,238,2.381,239,2.381,240,3.452,241,2.381,242,2.381,243,2.381,244,2.381,245,2.381,246,2.381,247,2.381,248,2.381,249,2.381,250,3.452,251,3.452,252,3.452,253,2.381,254,2.381,255,2.381,256,1.464,257,2.381,258,2.381,259,2.381,260,2.381,261,2.381,262,3.452,263,1.955,264,2.381,265,2.381,266,2.381,267,2.381,268,2.381,269,2.381,270,2.381]],["title/injectables/PrismaService.html",[38,0.847,53,0.299]],["body/injectables/PrismaService.html",[3,0.448,4,0.448,5,0.385,7,0.514,8,1.094,11,0.041,12,1.094,14,1.094,16,0.592,17,0.385,20,0.448,21,0.448,26,0.029,27,0.029,38,1.219,53,0.43,54,1.026,88,1.952,95,1.026,96,1.026,97,0.828,98,1.026,111,1.67,126,2.621,271,2.649,272,4.773,273,4.262,274,4.451,275,4.262,276,5.077,277,3.227,278,3.227,279,3.227,280,2.649,281,2.649,282,3.227,283,3.227,284,3.227]],["title/controllers/SubmissionsController.html",[0,1.046,285,1.822]],["body/controllers/SubmissionsController.html",[0,0.499,2,0.554,3,0.196,4,0.196,5,0.169,7,0.225,8,0.592,10,2.075,11,0.041,12,0.866,14,0.866,15,1.603,16,0.468,17,0.169,20,0.196,21,0.196,24,0.836,26,0.016,27,0.016,38,0.836,72,0.687,88,1.722,91,0.616,95,1.073,96,1.268,97,0.751,98,1.073,103,1.592,109,1.256,110,1.322,111,0.554,113,0.994,122,0.687,123,0.869,155,2.4,158,2.291,159,1.834,161,0.994,168,2.804,177,0.994,178,1.622,180,0.994,182,0.994,189,2.372,206,1.421,210,2.77,211,1.894,213,1.894,256,3.209,285,1.419,286,1.16,287,1.414,288,2.924,289,2.307,290,2.307,291,2.307,292,1.414,293,1.414,294,1.414,295,1.414,296,1.414,297,1.414,298,1.414,299,2.958,300,1.414,301,1.414,302,1.414,303,1.414,304,1.414,305,3.052,306,1.16,307,1.414,308,1.414,309,1.414,310,1.414,311,3.374,312,2.77,313,1.894,314,2.055,315,2.924,316,3.603,317,3.984,318,2.924,319,2.77,320,2.307,321,2.924,322,2.4,323,2.924,324,2.924,325,2.372,326,1.414,327,1.414,328,1.414,329,1.414,330,1.414,331,1.414,332,3.374,333,1.894,334,2.307,335,1.894,336,1.414,337,1.16,338,1.414,339,1.414,340,1.414,341,1.414,342,1.414,343,1.414,344,1.414,345,1.414,346,1.414]],["title/controllers/TaskController.html",[0,1.046,347,1.822]],["body/controllers/TaskController.html",[0,0.62,2,0.689,3,0.244,4,0.244,5,0.21,7,0.28,8,0.705,10,2.078,11,0.041,12,0.867,14,0.867,15,1.62,16,0.53,17,0.21,20,0.244,21,0.244,24,0.966,26,0.019,27,0.019,38,0.966,72,0.854,88,1.723,91,0.766,95,0.873,96,1.074,97,0.451,98,0.873,103,1.84,109,1.495,110,1.076,111,1.497,115,1.08,122,0.854,123,1.08,158,2.392,159,1.914,161,1.235,168,1.93,176,1.442,177,1.235,178,1.93,179,1.442,180,1.93,182,1.235,189,1.235,256,2.701,263,1.442,299,2.913,305,2.774,306,1.442,312,1.442,313,1.442,314,1.93,316,2.254,317,3.088,319,3.606,325,1.93,333,2.254,335,1.442,337,1.442,347,1.688,348,1.442,349,2.745,350,3.82,351,3.379,352,1.757,353,2.745,354,1.757,355,3.768,356,1.757,357,1.757,358,4.393,359,1.757,360,1.757,361,1.334,362,0.957,363,1.442,364,1.757,365,1.757,366,1.757,367,2.745,368,1.757,369,1.93,370,3.379,371,3.379,372,1.757,373,1.757,374,1.757,375,1.757,376,1.757,377,1.757,378,1.757,379,2.254,380,1.757,381,1.442,382,1.757,383,1.757,384,1.442,385,1.442,386,2.745,387,1.757,388,2.745,389,1.757,390,1.757,391,1.757,392,2.745,393,1.757,394,1.442]],["title/modules/TaskModule.html",[28,1.161,36,1.613]],["body/modules/TaskModule.html",[2,1.636,3,0.434,4,0.434,5,0.373,11,0.041,16,0.746,17,0.373,20,0.434,21,0.434,26,0.028,27,0.028,28,1.636,30,1.363,31,1.82,36,3.105,38,1.537,39,2.274,40,1.703,41,1.703,43,2.567,72,1.52,206,2.612,285,2.89,299,2.199,347,2.89,361,2.612,362,1.703,363,2.568,395,2.568,396,2.568,397,3.128,398,3.128,399,3.128,400,3.128]],["title/injectables/TaskQueueService.html",[53,0.299,361,1.44]],["body/injectables/TaskQueueService.html",[3,0.313,4,0.313,5,0.269,7,0.36,8,0.852,11,0.041,12,1.188,14,1.011,16,0.461,17,0.269,20,0.313,21,0.313,24,0.949,26,0.023,27,0.023,53,0.335,54,0.717,95,0.717,96,0.717,97,0.579,98,0.717,109,2.635,110,0.884,143,2.725,158,1.807,159,0.983,274,3.972,281,1.852,317,1.586,322,3.564,325,1.586,355,2.725,361,1.613,362,2.635,369,3.683,384,2.725,394,3.564,401,3.402,402,1.586,403,2.333,404,4.839,405,4.627,406,4.839,407,3.319,408,2.256,409,4.342,410,2.256,411,3.319,412,2.256,413,3.319,414,2.256,415,2.256,416,2.256,417,2.256,418,2.333,419,1.852,420,2.256,421,2.256,422,2.256,423,2.256,424,3.937,425,2.256,426,2.256,427,2.256,428,3.319,429,2.256,430,2.256,431,2.256,432,2.256,433,2.256,434,2.256,435,2.256,436,2.256,437,2.256,438,2.256]],["title/modules/UsersModule.html",[28,1.161,37,1.44]],["body/modules/UsersModule.html",[3,0.461,4,0.461,5,0.396,11,0.04,16,0.712,17,0.396,20,0.461,21,0.461,26,0.03,27,0.03,28,1.702,29,1.807,30,1.446,31,1.892,37,2.775,38,1.563,39,2.364,40,1.807,41,1.807,43,2.669,65,2.29,72,1.613,439,2.724,440,3.319,441,2.724,442,3.319,443,4.341,444,3.319,445,3.319]],["title/injectables/UsersService.html",[53,0.299,65,1.161]],["body/injectables/UsersService.html",[3,0.266,4,0.266,5,0.229,7,0.306,8,0.754,11,0.041,12,1.027,14,0.917,15,2.037,16,0.555,17,0.229,20,0.408,21,0.266,22,1.348,24,1.234,26,0.02,27,0.02,38,1.302,53,0.296,54,0.609,65,1.151,72,0.932,88,1.606,91,0.836,95,1.272,96,1.272,97,1.108,98,1.272,100,2.813,102,2.461,105,3.542,107,3.755,108,2.813,110,1.568,111,1.399,113,2.065,115,3.081,116,2.411,118,2.411,121,2.411,152,2.931,162,2.411,256,2.195,369,1.348,379,2.411,385,1.574,446,1.348,447,2.938,448,3.571,449,1.918,450,1.918,451,2.938,452,1.918,453,2.938,454,4.738,455,1.918,456,1.918,457,1.918,458,1.918,459,1.574,460,1.918,461,2.411,462,1.918,463,1.918,464,2.938,465,1.918,466,1.918,467,1.918,468,1.918,469,1.918,470,1.918,471,1.918,472,1.918]],["title/coverage.html",[473,3.304]],["body/coverage.html",[0,1.707,1,1.762,5,0.342,6,2.352,11,0.04,18,1.392,26,0.027,27,0.027,38,0.819,53,0.559,55,2.352,62,1.249,63,1.56,64,1.56,65,1.123,67,1.762,76,1.762,87,2.352,97,0.736,122,1.392,123,1.762,124,2.352,128,2.352,148,2.352,159,1.249,160,2.352,206,1.392,207,2.352,217,2.014,271,2.352,285,1.762,286,2.352,347,1.762,348,2.352,361,1.392,362,2.142,381,4.795,401,2.766,402,2.766,418,2.014,446,2.014,473,2.352,474,2.865,475,2.865,476,2.865,477,4.493,478,4.493,479,2.352,480,3.934,481,4.836,482,4.493,483,2.352,484,2.865,485,2.352,486,3.934,487,2.865,488,2.865]],["title/dependencies.html",[31,1.551,489,2.039]],["body/dependencies.html",[11,0.041,17,0.413,26,0.03,27,0.03,31,1.507,49,2.84,69,2.432,71,1.681,135,3.47,136,2.432,154,2.84,214,2.84,216,3.661,217,2.432,280,2.84,459,2.84,461,2.84,490,4.936,491,3.459,492,3.459,493,4.46,494,3.459,495,4.46,496,3.459,497,3.459,498,3.459,499,3.459,500,3.459,501,3.459,502,3.459,503,3.459,504,3.459,505,3.459,506,3.459,507,3.459,508,3.459,509,3.459,510,3.459,511,3.459]],["title/miscellaneous/functions.html",[512,1.207,513,2.921]],["body/miscellaneous/functions.html",[7,0.711,11,0.035,26,0.035,27,0.035,483,3.66,485,4.536,512,2.167,513,3.66,514,4.459]],["title/index.html",[7,0.472,515,2.432]],["body/index.html",[2,1.1,11,0.04,18,2.16,26,0.026,27,0.026,29,3.098,30,1.223,31,1.69,32,2.304,33,2.304,34,2.304,35,3.157,36,3.005,37,2.681,38,1.488,39,2.112,40,1.528,41,1.528,54,0.892,59,2.304,60,2.304,62,1.937,63,2.42,64,2.42,65,2.13,206,2.16,361,2.16,395,2.304,396,2.304,439,2.304,441,2.304,515,2.304,516,3.878,517,2.806]],["title/modules.html",[30,1.754]],["body/modules.html",[11,0.034,26,0.034,27,0.034,29,2.267,30,1.815,35,2.267,36,2.267,37,2.023,518,5.569,519,5.569,520,5.569,521,5.569]],["title/properties.html",[403,2.501,489,2.039]],["body/properties.html",[11,0.04,26,0.035,27,0.035,314,3.084,403,3.084,522,4.387,523,4.387,524,4.387,525,4.387,526,4.387]],["title/miscellaneous/typealiases.html",[512,1.207,527,3.558]],["body/miscellaneous/typealiases.html",[7,0.703,11,0.035,26,0.035,27,0.035,97,1.33,100,3.642,446,3.101,512,2.144,528,4.411,529,4.411,530,4.411]],["title/miscellaneous/variables.html",[512,1.207,531,2.921]],["body/miscellaneous/variables.html",[7,0.629,11,0.04,15,1.392,26,0.033,27,0.033,76,2.978,82,3.237,97,1.243,362,2.147,401,2.772,402,3.404,418,3.404,419,3.237,479,3.237,512,1.916,531,3.237,532,3.943,533,3.943,534,3.943,535,4.843,536,4.843,537,3.943,538,3.943]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":381,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":523,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["0.1.99",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":248,"title":{},"body":{"injectables/PdfService.html":{}}}],["1000).tofixed(2)}s",{"_index":266,"title":{},"body":{"injectables/PdfService.html":{}}}],["2.1.0",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":201,"title":{},"body":{"controllers/LoginController.html":{}}}],["24h",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["3.0.2",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":203,"title":{},"body":{"controllers/LoginController.html":{},"injectables/PdfService.html":{}}}],["4",{"_index":516,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":252,"title":{},"body":{"injectables/PdfService.html":{}}}],["7.2.0",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":517,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["a4",{"_index":221,"title":{},"body":{"injectables/PdfService.html":{}}}],["access_token",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":528,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amqp",{"_index":416,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["amqp.connect",{"_index":422,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["amqp://${process.env.mqtt_user}:${process.env.mqtt_pass}@${process.env.mqtt_host}:${process.env.mqtt_port",{"_index":423,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["amqplib",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["amqplib/callback_api",{"_index":417,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["app",{"_index":278,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":284,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["async",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":162,"title":{},"body":{"controllers/LoginController.html":{},"injectables/UsersService.html":{}}}],["auth(email",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth.guard",{"_index":182,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["auth.guard.ts",{"_index":124,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{}}}],["auth/auth.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":125,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/LoginController.html":{}}}],["authguard('jwt",{"_index":127,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":314,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"properties.html":{}}}],["authservice",{"_index":62,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"coverage.html":{},"index.html":{}}}],["await",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":180,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["badrequestexception('expected",{"_index":368,"title":{},"body":{"controllers/TaskController.html":{}}}],["badrequestexception('something",{"_index":389,"title":{},"body":{"controllers/TaskController.html":{}}}],["badrequestexception('this",{"_index":339,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["badrequestexception('wrong",{"_index":390,"title":{},"body":{"controllers/TaskController.html":{}}}],["body",{"_index":179,"title":{},"body":{"controllers/LoginController.html":{},"controllers/TaskController.html":{}}}],["body('lang",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{}}}],["body('sourcecode",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{}}}],["boolean",{"_index":413,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["bootstrap",{"_index":485,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":521,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":518,"title":{},"body":{"modules.html":{}}}],["buffer.from",{"_index":436,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["buildtestingresultpdf",{"_index":208,"title":{},"body":{"injectables/PdfService.html":{}}}],["buildtestingresultpdf(submission",{"_index":209,"title":{},"body":{"injectables/PdfService.html":{}}}],["calculatepass",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["calculatepass(pass",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["catch",{"_index":325,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["catch((e",{"_index":388,"title":{},"body":{"controllers/TaskController.html":{}}}],["channel",{"_index":404,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["channel.assertqueue(queue_name",{"_index":429,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["class",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":59,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":61,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":60,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_taskmodule",{"_index":395,"title":{},"body":{"modules/TaskModule.html":{},"index.html":{}}}],["cluster_taskmodule_providers",{"_index":396,"title":{},"body":{"modules/TaskModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":441,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_providers",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":335,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["communication",{"_index":426,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["completions",{"_index":375,"title":{},"body":{"controllers/TaskController.html":{}}}],["configmodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":181,"title":{},"body":{"controllers/LoginController.html":{}}}],["connect",{"_index":386,"title":{},"body":{"controllers/TaskController.html":{}}}],["connection",{"_index":405,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["connection.createchannel((error1",{"_index":427,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["const",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":149,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(prismaservice",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}},"body":{"controllers/AppController.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":183,"title":{},"body":{"controllers/LoginController.html":{}}}],["controller('submissions",{"_index":308,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["controller('task",{"_index":364,"title":{},"body":{"controllers/TaskController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"index.html":{}}}],["count",{"_index":232,"title":{},"body":{"injectables/PdfService.html":{}}}],["coverage",{"_index":473,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":384,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["createuser",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(username",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["creationresult",{"_index":204,"title":{},"body":{"controllers/LoginController.html":{}}}],["crypto",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["cuser",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["data",{"_index":385,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":227,"title":{},"body":{"injectables/PdfService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["default",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":524,"title":{},"body":{"properties.html":{}}}],["details",{"_index":253,"title":{},"body":{"injectables/PdfService.html":{}}}],["detailstable",{"_index":254,"title":{},"body":{"injectables/PdfService.html":{}}}],["devmode",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["difficulty",{"_index":374,"title":{},"body":{"controllers/TaskController.html":{}}}],["doc",{"_index":218,"title":{},"body":{"injectables/PdfService.html":{}}}],["doc.end",{"_index":270,"title":{},"body":{"injectables/PdfService.html":{}}}],["doc.page.width",{"_index":251,"title":{},"body":{"injectables/PdfService.html":{}}}],["doc.pipe(res",{"_index":269,"title":{},"body":{"injectables/PdfService.html":{}}}],["doc.table(detailstable",{"_index":268,"title":{},"body":{"injectables/PdfService.html":{}}}],["doc.table(headtable",{"_index":249,"title":{},"body":{"injectables/PdfService.html":{}}}],["documentation",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["durable",{"_index":430,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["e",{"_index":438,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["e.success).length",{"_index":246,"title":{},"body":{"injectables/PdfService.html":{}}}],["e.success).length.tostring",{"_index":241,"title":{},"body":{"injectables/PdfService.html":{}}}],["email",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["enableshutdownhooks",{"_index":273,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":275,"title":{},"body":{"injectables/PrismaService.html":{}}}],["error",{"_index":257,"title":{},"body":{"injectables/PdfService.html":{}}}],["error0",{"_index":424,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["error1",{"_index":428,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["execution",{"_index":258,"title":{},"body":{"injectables/PdfService.html":{}}}],["expected",{"_index":382,"title":{},"body":{"controllers/TaskController.html":{}}}],["expiresin",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":443,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":214,"title":{},"body":{"injectables/PdfService.html":{},"dependencies.html":{}}}],["extends",{"_index":126,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":133,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":141,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":143,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TaskQueueService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findfirst",{"_index":333,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["findmany",{"_index":313,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["function",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":513,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":344,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["generatesummary",{"_index":288,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["generatesummary(req",{"_index":292,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["get('/code/:id",{"_index":330,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["get('/summary/:id",{"_index":336,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["get(':id",{"_index":353,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('my",{"_index":309,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["get('my/:task",{"_index":326,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["get('ping",{"_index":190,"title":{},"body":{"controllers/LoginController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmysubmissions",{"_index":289,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getmysubmissions(@request",{"_index":310,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getmysubmissions(req",{"_index":295,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getmytasksubmissions",{"_index":290,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getmytasksubmissions(@request",{"_index":327,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getmytasksubmissions(req",{"_index":298,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getsourcecode",{"_index":291,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getsourcecode(@param('id",{"_index":331,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["getsourcecode(id",{"_index":302,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["gettask",{"_index":349,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(@param('id",{"_index":366,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(taskid",{"_index":352,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettasks",{"_index":350,"title":{},"body":{"controllers/TaskController.html":{}}}],["head",{"_index":222,"title":{},"body":{"injectables/PdfService.html":{}}}],["headers",{"_index":226,"title":{},"body":{"injectables/PdfService.html":{}}}],["headtable",{"_index":223,"title":{},"body":{"injectables/PdfService.html":{}}}],["hello",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["httpcode",{"_index":175,"title":{},"body":{"controllers/LoginController.html":{}}}],["httpcode(200",{"_index":185,"title":{},"body":{"controllers/LoginController.html":{}}}],["id",{"_index":256,"title":{},"body":{"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":142,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":281,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/TaskQueueService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["include",{"_index":372,"title":{},"body":{"controllers/TaskController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":276,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["internalservererrorexception",{"_index":305,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["isnan(taskid",{"_index":367,"title":{},"body":{"controllers/TaskController.html":{}}}],["issuccess",{"_index":320,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["istested",{"_index":321,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["js",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["js/sha256",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify",{"_index":437,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["jwt",{"_index":136,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/LoginController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":122,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":140,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":63,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["lang",{"_index":319,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["language",{"_index":228,"title":{},"body":{"injectables/PdfService.html":{}}}],["license",{"_index":525,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":234,"title":{},"body":{"injectables/PdfService.html":{}}}],["literal",{"_index":530,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":154,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":64,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"index.html":{}}}],["login",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LoginController.html":{}}}],["login(@request",{"_index":187,"title":{},"body":{"controllers/LoginController.html":{}}}],["login(req",{"_index":165,"title":{},"body":{"controllers/LoginController.html":{}}}],["login(user",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["login/login.controller",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{}}}],["logincontroller",{"_index":67,"title":{"controllers/LoginController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/LoginController.html":{},"coverage.html":{}}}],["made",{"_index":343,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["margin",{"_index":219,"title":{},"body":{"injectables/PdfService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":245,"title":{},"body":{"injectables/PdfService.html":{}}}],["memlimit",{"_index":323,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["memory",{"_index":235,"title":{},"body":{"injectables/PdfService.html":{}}}],["metadata",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":512,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["mqtt",{"_index":420,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["ms",{"_index":311,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["name",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"coverage.html":{}}}],["null",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"controllers/SubmissionsController.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":369,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":406,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["onmoduleinit",{"_index":274,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/TaskQueueService.html":{}}}],["optional",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["overview",{"_index":515,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":489,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":306,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["param('id",{"_index":337,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["param('task",{"_index":328,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["parameters",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["parseint(id",{"_index":334,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["parseint(req.user.userid",{"_index":387,"title":{},"body":{"controllers/TaskController.html":{}}}],["parseint(task",{"_index":329,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["parseint(taskid",{"_index":371,"title":{},"body":{"controllers/TaskController.html":{}}}],["pass",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passport",{"_index":135,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":137,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":138,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":152,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["payload",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":146,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":147,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pdf/pdf.service",{"_index":307,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["pdfdocument",{"_index":215,"title":{},"body":{"injectables/PdfService.html":{}}}],["pdfkit",{"_index":216,"title":{},"body":{"injectables/PdfService.html":{},"dependencies.html":{}}}],["pdfservice",{"_index":206,"title":{"injectables/PdfService.html":{}},"body":{"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{},"modules/TaskModule.html":{},"coverage.html":{},"index.html":{}}}],["percentage",{"_index":236,"title":{},"body":{"injectables/PdfService.html":{}}}],["person",{"_index":342,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["ping",{"_index":163,"title":{},"body":{"controllers/LoginController.html":{}}}],["ping(@request",{"_index":191,"title":{},"body":{"controllers/LoginController.html":{}}}],["ping(req",{"_index":169,"title":{},"body":{"controllers/LoginController.html":{}}}],["post",{"_index":176,"title":{},"body":{"controllers/LoginController.html":{},"controllers/TaskController.html":{}}}],["post(':id/submit",{"_index":376,"title":{},"body":{"controllers/TaskController.html":{}}}],["post('login",{"_index":186,"title":{},"body":{"controllers/LoginController.html":{}}}],["post('register",{"_index":173,"title":{},"body":{"controllers/LoginController.html":{}}}],["prefix",{"_index":161,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["prisma/client",{"_index":280,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.service",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":272,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":38,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["private",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["promise",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":403,"title":{"properties.html":{}},"body":{"injectables/TaskQueueService.html":{},"properties.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["queue",{"_index":421,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["queue.service",{"_index":363,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["queue.service.ts",{"_index":402,"title":{},"body":{"injectables/TaskQueueService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["queue.service.ts:11",{"_index":410,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["queue.service.ts:38",{"_index":408,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["queue.service.ts:44",{"_index":412,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["queue.service.ts:8",{"_index":414,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["queue.service.ts:9",{"_index":415,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["queue/task",{"_index":362,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["queue_name",{"_index":418,"title":{},"body":{"injectables/TaskQueueService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["r",{"_index":332,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["r.author.id",{"_index":341,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["r.istested",{"_index":338,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["randomuuid().tostring",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":164,"title":{},"body":{"controllers/LoginController.html":{}}}],["register(@body",{"_index":195,"title":{},"body":{"controllers/LoginController.html":{}}}],["register(req",{"_index":172,"title":{},"body":{"controllers/LoginController.html":{}}}],["registerqueues",{"_index":433,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["req",{"_index":168,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["req.email",{"_index":198,"title":{},"body":{"controllers/LoginController.html":{}}}],["req.password",{"_index":197,"title":{},"body":{"controllers/LoginController.html":{}}}],["req.password.length",{"_index":202,"title":{},"body":{"controllers/LoginController.html":{}}}],["req.user",{"_index":194,"title":{},"body":{"controllers/LoginController.html":{}}}],["req.user.userid",{"_index":315,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["req.username",{"_index":196,"title":{},"body":{"controllers/LoginController.html":{}}}],["req.username.length",{"_index":200,"title":{},"body":{"controllers/LoginController.html":{}}}],["request",{"_index":178,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["res",{"_index":210,"title":{},"body":{"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{}}}],["reset",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["response",{"_index":211,"title":{},"body":{"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{}}}],["result.errormessage",{"_index":264,"title":{},"body":{"injectables/PdfService.html":{}}}],["result.executiontime",{"_index":265,"title":{},"body":{"injectables/PdfService.html":{}}}],["result.id",{"_index":261,"title":{},"body":{"injectables/PdfService.html":{}}}],["result.memory}kb",{"_index":267,"title":{},"body":{"injectables/PdfService.html":{}}}],["result.success",{"_index":262,"title":{},"body":{"injectables/PdfService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["rows",{"_index":237,"title":{},"body":{"injectables/PdfService.html":{}}}],["rxjs",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["safeuser",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["salt",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["salt).tostring",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["secret",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":144,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":316,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["sha256",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["sha256(pass",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["signoptions",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":220,"title":{},"body":{"injectables/PdfService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["sourcecode",{"_index":358,"title":{},"body":{"controllers/TaskController.html":{}}}],["sourcecode.length",{"_index":380,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/.../constants.ts",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.ts",{"_index":529,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module",{"_index":444,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/app.module.ts",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module.ts",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:6",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":479,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":123,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":128,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":130,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":148,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":153,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":150,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/login/login.controller.ts",{"_index":160,"title":{},"body":{"controllers/LoginController.html":{},"coverage.html":{}}}],["src/auth/login/login.controller.ts:27",{"_index":167,"title":{},"body":{"controllers/LoginController.html":{}}}],["src/auth/login/login.controller.ts:33",{"_index":171,"title":{},"body":{"controllers/LoginController.html":{}}}],["src/auth/login/login.controller.ts:41",{"_index":174,"title":{},"body":{"controllers/LoginController.html":{}}}],["src/main.ts",{"_index":483,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.service",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":271,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":277,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":279,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/task/submissions/pdf/pdf.service.ts",{"_index":207,"title":{},"body":{"injectables/PdfService.html":{},"coverage.html":{}}}],["src/task/submissions/pdf/pdf.service.ts:7",{"_index":212,"title":{},"body":{"injectables/PdfService.html":{}}}],["src/task/submissions/submissions.controller.ts",{"_index":286,"title":{},"body":{"controllers/SubmissionsController.html":{},"coverage.html":{}}}],["src/task/submissions/submissions.controller.ts:102",{"_index":304,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["src/task/submissions/submissions.controller.ts:122",{"_index":294,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["src/task/submissions/submissions.controller.ts:25",{"_index":297,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["src/task/submissions/submissions.controller.ts:59",{"_index":301,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["src/task/task",{"_index":401,"title":{},"body":{"injectables/TaskQueueService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/task/task.module.ts",{"_index":397,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task/task.controller.ts",{"_index":348,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task/task.controller.ts:24",{"_index":354,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task/task.controller.ts:46",{"_index":356,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task/task.controller.ts:64",{"_index":360,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/users/users.module",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":442,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/LoginController.html":{}}}],["src/users/users.service.ts",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/users.service.ts:13",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["stars",{"_index":373,"title":{},"body":{"controllers/TaskController.html":{}}}],["statements",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":192,"title":{},"body":{"controllers/LoginController.html":{}}}],["strategy",{"_index":134,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["subm",{"_index":383,"title":{},"body":{"controllers/TaskController.html":{}}}],["subm.id",{"_index":392,"title":{},"body":{"controllers/TaskController.html":{}}}],["submission",{"_index":213,"title":{},"body":{"injectables/PdfService.html":{},"controllers/SubmissionsController.html":{}}}],["submission.id",{"_index":225,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.lang",{"_index":239,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.submittedat.toutcstring",{"_index":238,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.task.memlimit}kb",{"_index":244,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.task.timelimit}s",{"_index":243,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.testresults.filter((e",{"_index":240,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.testresults.length",{"_index":247,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.testresults.length.tostring",{"_index":242,"title":{},"body":{"injectables/PdfService.html":{}}}],["submission.testresults.map((result",{"_index":260,"title":{},"body":{"injectables/PdfService.html":{}}}],["submissionid",{"_index":394,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["submissions",{"_index":287,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["submissions/pdf/pdf.service",{"_index":400,"title":{},"body":{"modules/TaskModule.html":{}}}],["submissions/submissions.controller",{"_index":399,"title":{},"body":{"modules/TaskModule.html":{}}}],["submissionscontroller",{"_index":285,"title":{"controllers/SubmissionsController.html":{}},"body":{"controllers/SubmissionsController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["submit",{"_index":351,"title":{},"body":{"controllers/TaskController.html":{}}}],["submit(req",{"_index":357,"title":{},"body":{"controllers/TaskController.html":{}}}],["submittask",{"_index":407,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["submittask(taskid",{"_index":411,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["submittedat",{"_index":318,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["subtitle",{"_index":255,"title":{},"body":{"injectables/PdfService.html":{}}}],["success",{"_index":193,"title":{},"body":{"controllers/LoginController.html":{},"injectables/PdfService.html":{}}}],["successful",{"_index":229,"title":{},"body":{"injectables/PdfService.html":{}}}],["summary",{"_index":345,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["super",{"_index":139,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":519,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":520,"title":{},"body":{"modules.html":{}}}],["table",{"_index":217,"title":{},"body":{"injectables/PdfService.html":{},"coverage.html":{},"dependencies.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":299,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.timelimit",{"_index":393,"title":{},"body":{"controllers/TaskController.html":{}}}],["task/task.controller",{"_index":398,"title":{},"body":{"modules/TaskModule.html":{}}}],["task/task.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["task_submission",{"_index":419,"title":{},"body":{"injectables/TaskQueueService.html":{},"miscellaneous/variables.html":{}}}],["taskcontroller",{"_index":347,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskid",{"_index":355,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["taskmodule",{"_index":36,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"index.html":{},"modules.html":{}}}],["taskqueue",{"_index":365,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskqueueservice",{"_index":361,"title":{"injectables/TaskQueueService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskQueueService.html":{},"coverage.html":{},"index.html":{}}}],["test",{"_index":231,"title":{},"body":{"injectables/PdfService.html":{}}}],["tested",{"_index":340,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["testresults",{"_index":324,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["tests",{"_index":230,"title":{},"body":{"injectables/PdfService.html":{}}}],["this.$connect",{"_index":282,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":283,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":188,"title":{},"body":{"controllers/LoginController.html":{}}}],["this.authservice.validateuser(email",{"_index":157,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.calculatepass(pass",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.calculatepass(password",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.channel",{"_index":431,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["this.channel.sendtoqueue",{"_index":435,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["this.connection",{"_index":425,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["this.connection.close",{"_index":432,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["this.jwtservice.sign(payload",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.pdfservice.buildtestingresultpdf(r",{"_index":346,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["this.prismaservice.submission",{"_index":312,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["this.prismaservice.task",{"_index":370,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.prismaservice.user.create",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findfirst",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.taskqueue.submittask(parseint(taskid",{"_index":391,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.usersservice.auth(email",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser",{"_index":205,"title":{},"body":{"controllers/LoginController.html":{}}}],["throw",{"_index":158,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["time",{"_index":233,"title":{},"body":{"injectables/PdfService.html":{}}}],["timelimit",{"_index":322,"title":{},"body":{"controllers/SubmissionsController.html":{},"injectables/TaskQueueService.html":{}}}],["title",{"_index":224,"title":{},"body":{"injectables/PdfService.html":{}}}],["true",{"_index":317,"title":{},"body":{"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{}}}],["try",{"_index":434,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["type",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PdfService.html":{},"injectables/PrismaService.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{},"injectables/TaskQueueService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":527,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":199,"title":{},"body":{"controllers/LoginController.html":{}}}],["unauthorizedexception",{"_index":155,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/SubmissionsController.html":{}}}],["undefined",{"_index":379,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["uniqid",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["uniqid.process().tostring",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["unknown",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["unlicensed",{"_index":526,"title":{},"body":{"properties.html":{}}}],["used",{"_index":259,"title":{},"body":{"injectables/PdfService.html":{}}}],["useguards",{"_index":177,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["useguards(authguard('local",{"_index":184,"title":{},"body":{"controllers/LoginController.html":{}}}],["useguards(jwtauthguard",{"_index":189,"title":{},"body":{"controllers/LoginController.html":{},"controllers/SubmissionsController.html":{},"controllers/TaskController.html":{}}}],["useguards(jwtauthguard)@get('/code/:id",{"_index":303,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["useguards(jwtauthguard)@get('/summary/:id",{"_index":293,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["useguards(jwtauthguard)@get('my",{"_index":296,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["useguards(jwtauthguard)@get('my/:task",{"_index":300,"title":{},"body":{"controllers/SubmissionsController.html":{}}}],["useguards(jwtauthguard)@get('ping",{"_index":170,"title":{},"body":{"controllers/LoginController.html":{}}}],["useguards(jwtauthguard)@post(':id/submit",{"_index":359,"title":{},"body":{"controllers/TaskController.html":{}}}],["useguards(undefined)@httpcode(200)@post('login",{"_index":166,"title":{},"body":{"controllers/LoginController.html":{}}}],["user",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/LoginController.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.pass",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.salt",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":145,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["username",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":156,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users.service",{"_index":445,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":37,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":65,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/LoginController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["validate",{"_index":129,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":151,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":131,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["variable",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":531,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":522,"title":{},"body":{"properties.html":{}}}],["void",{"_index":409,"title":{},"body":{"injectables/TaskQueueService.html":{}}}],["width",{"_index":250,"title":{},"body":{"injectables/PdfService.html":{}}}],["world",{"_index":58,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":263,"title":{},"body":{"injectables/PdfService.html":{},"controllers/TaskController.html":{}}}],["zoom",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TaskModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TaskModule } from './task/task.module';\nimport { PrismaService } from './prisma/prisma.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [TaskModule, ConfigModule.forRoot(), AuthModule, UsersModule],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LoginController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { LoginController } from './login/login.controller';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '24h' },\n    }),\n    UsersModule,\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    UsersService,\n    PrismaService,\n  ],\n  controllers: [LoginController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: SafeUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SafeUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SafeUser, UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.auth(email, pass);\n    return user || null;\n  }\n\n  async login(user: SafeUser) {\n    const payload = {\n      username: user.username,\n      sub: user.id,\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n      email: user.email,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LoginController.html":{"url":"controllers/LoginController.html","title":"controller - LoginController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LoginController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/login/login.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                ping\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@HttpCode(200)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/login/login.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ping\n                        \n                    \n                \n            \n            \n                \n                    \n                    ping(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('ping')\n                \n            \n\n            \n                \n                    Defined in src/auth/login/login.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/login/login.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Request,\n  Get,\n  Body,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from '../auth.service';\nimport { JwtAuthGuard } from '../jwt-auth.guard';\n\n@Controller('auth')\nexport class LoginController {\n  constructor(\n    private usersService: UsersService,\n    private authService: AuthService,\n  ) {}\n\n  @UseGuards(AuthGuard('local'))\n  @HttpCode(200)\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('ping')\n  async ping(@Request() req) {\n    return {\n      status: 'success',\n      user: req.user,\n    };\n  }\n\n  @Post('register')\n  async register(@Body() req) {\n    if (\n      !req.username ||\n      !req.password ||\n      !req.email ||\n      typeof req.username != 'string' ||\n      typeof req.password != 'string' ||\n      typeof req.email != 'string' ||\n      req.username.length > 20 ||\n      req.password.length > 30\n    ) {\n      throw new BadRequestException();\n    }\n    const creationResult = await this.usersService.createUser(\n      req.username,\n      req.password,\n      req.email,\n    );\n\n    if (!creationResult) throw new ConflictException();\n    else return creationResult;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PdfService.html":{"url":"injectables/PdfService.html","title":"injectable - PdfService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PdfService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/submissions/pdf/pdf.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                buildTestingResultPdf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        buildTestingResultPdf\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildTestingResultPdf(submission: any, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/task/submissions/pdf/pdf.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    submission\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Response } from 'express';\nimport PDFDocument from 'pdfkit-table';\n\n@Injectable()\nexport class PdfService {\n  async buildTestingResultPdf(submission: any, res: Response) {\n    const doc = new PDFDocument({ margin: 30, size: 'A4' });\n\n    // head table\n    const headTable = {\n      title: `Submission ${submission.id} results`,\n      headers: [\n        'Submission date',\n        'Language',\n        'Successful tests',\n        'Test count',\n        'Time limit',\n        'Memory limit',\n        'Percentage',\n      ],\n      rows: [\n        [\n          submission.submittedAt.toUTCString(),\n          submission.lang,\n          submission.TestResults.filter((e) => e.success).length.toString(),\n          submission.TestResults.length.toString(),\n          `${submission.task.timeLimit}s`,\n          `${submission.task.memLimit}kb`,\n          `${Math.floor(\n            (submission.TestResults.filter((e) => e.success).length /\n              submission.TestResults.length) *\n              100,\n          )}%`,\n        ],\n      ],\n    };\n\n    await doc.table(headTable, {\n      width: doc.page.width - 60,\n    });\n\n    // details\n    const detailsTable = {\n      subtitle: 'Tests',\n      headers: ['Id', 'Success', 'Error', 'Execution time', 'Used memory'],\n      rows: submission.TestResults.map((result: any) => {\n        return [\n          result.id,\n          result.success ? 'YES' : 'NO',\n          result.success ? '—' : result.errorMessage,\n          `${(result.executionTime / 1000).toFixed(2)}s`,\n          `${result.memory}kb`,\n        ];\n      }),\n    };\n\n    await doc.table(detailsTable, {\n      width: doc.page.width - 60,\n    });\n\n    doc.pipe(res);\n    doc.end();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubmissionsController.html":{"url":"controllers/SubmissionsController.html","title":"controller - SubmissionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubmissionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/submissions/submissions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                submissions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateSummary\n                            \n                            \n                                    Async\n                                getMySubmissions\n                            \n                            \n                                    Async\n                                getMyTaskSubmissions\n                            \n                            \n                                    Async\n                                getSourceCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSummary(req, id: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/summary/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/submissions/submissions.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMySubmissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySubmissions(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('my')\n                \n            \n\n            \n                \n                    Defined in src/task/submissions/submissions.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMyTaskSubmissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyTaskSubmissions(req, task: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('my/:task')\n                \n            \n\n            \n                \n                    Defined in src/task/submissions/submissions.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    task\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSourceCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourceCode(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/code/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/submissions/submissions.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  InternalServerErrorException,\n  Param,\n  Request,\n  Response,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { PdfService } from './pdf/pdf.service';\n\n@Controller('submissions')\nexport class SubmissionsController {\n  constructor(\n    private prismaService: PrismaService,\n    private pdfService: PdfService,\n  ) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get('my')\n  async getMySubmissions(@Request() req) {\n    const ms = this.prismaService.submission\n      .findMany({\n        where: {\n          author: {\n            id: req.user.userId,\n          },\n        },\n        select: {\n          id: true,\n          submittedAt: true,\n          lang: true,\n          isSuccess: true,\n          isTested: true,\n          task: {\n            select: {\n              id: true,\n              name: true,\n              timeLimit: true,\n              memLimit: true,\n            },\n          },\n          TestResults: true,\n        },\n      })\n      .catch(() => {\n        throw new InternalServerErrorException();\n      });\n\n    return ms;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('my/:task')\n  async getMyTaskSubmissions(@Request() req, @Param('task') task: string) {\n    const ms = this.prismaService.submission\n      .findMany({\n        where: {\n          AND: [\n            {\n              author: {\n                id: req.user.userId,\n              },\n            },\n            {\n              task: {\n                id: parseInt(task),\n              },\n            },\n          ],\n        },\n        select: {\n          id: true,\n          submittedAt: true,\n          lang: true,\n          isSuccess: true,\n          isTested: true,\n          task: {\n            select: {\n              id: true,\n              name: true,\n              timeLimit: true,\n              memLimit: true,\n            },\n          },\n          TestResults: true,\n        },\n      })\n      .catch(() => {\n        throw new InternalServerErrorException();\n      });\n\n    return ms;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('/code/:id')\n  async getSourceCode(@Param('id') id: string) {\n    const r = this.prismaService.submission\n      .findFirst({\n        where: {\n          id: parseInt(id),\n        },\n        select: {\n          id: true,\n          code: true,\n          lang: true,\n        },\n      })\n      .catch(() => {\n        throw new InternalServerErrorException();\n      });\n    return r;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('/summary/:id')\n  async generateSummary(\n    @Request() req,\n    @Param('id') id: string,\n    @Response() res,\n  ) {\n    const r = await this.prismaService.submission\n      .findFirst({\n        where: {\n          id: parseInt(id),\n        },\n        select: {\n          author: {\n            select: {\n              id: true,\n            },\n          },\n          id: true,\n          submittedAt: true,\n          code: true,\n          lang: true,\n          isTested: true,\n          task: {\n            select: {\n              timeLimit: true,\n              memLimit: true,\n            },\n          },\n          TestResults: true,\n        },\n      })\n      .catch(() => {\n        throw new InternalServerErrorException();\n      });\n    if (r == null) {\n      throw new UnauthorizedException('');\n    }\n    if (!r.isTested) {\n      throw new BadRequestException('This submission is not yet tested');\n    }\n    if (r.author.id != req.user.userId) {\n      throw new UnauthorizedException(\n        'Only person who made this submission can generate summary',\n      );\n    }\n\n    this.pdfService.buildTestingResultPdf(r, res);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                    Async\n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTask(taskId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task/task.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTasks\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/task/task.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submit\n                        \n                    \n                \n            \n            \n                \n                    \n                    submit(req, sourceCode: string, lang: string, taskId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':id/submit')\n                \n            \n\n            \n                \n                    Defined in src/task/task/task.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sourceCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  InternalServerErrorException,\n  Param,\n  Post,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { TaskQueueService } from '../task-queue/task-queue.service';\n\n@Controller('task')\nexport class TaskController {\n  constructor(\n    private taskQueue: TaskQueueService,\n    private prismaService: PrismaService,\n  ) {}\n\n  @Get(':id')\n  async getTask(@Param('id') taskId) {\n    if (isNaN(taskId))\n      throw new BadRequestException('Expected taskId to be a number');\n    return await this.prismaService.task\n      .findFirst({\n        where: {\n          id: parseInt(taskId),\n        },\n        include: {\n          author: {\n            select: {\n              username: true,\n            },\n          },\n        },\n      })\n      .catch(() => {\n        throw new InternalServerErrorException();\n      });\n  }\n\n  @Get()\n  async getTasks() {\n    return await this.prismaService.task\n      .findMany({\n        select: {\n          id: true,\n          name: true,\n          stars: true,\n          difficulty: true,\n          completions: true,\n        },\n      })\n      .catch(() => {\n        throw new InternalServerErrorException();\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post(':id/submit')\n  async submit(\n    @Request() req,\n    @Body('sourceCode') sourceCode: string,\n    @Body('lang') lang: string,\n    @Param('id') taskId,\n  ) {\n    if (\n      isNaN(taskId) ||\n      sourceCode == undefined ||\n      sourceCode.length == 0 ||\n      lang == undefined\n    )\n      throw new BadRequestException(\n        'Expected taskId to be a number and sourceCode to be a string',\n      );\n\n    const subm = await this.prismaService.submission\n      .create({\n        data: {\n          code: sourceCode,\n          lang: lang,\n          task: {\n            connect: {\n              id: parseInt(taskId),\n            },\n          },\n          author: {\n            connect: {\n              id: parseInt(req.user.userId),\n            },\n          },\n        },\n      })\n      .catch((e) => {\n        throw new BadRequestException('Something is not yes');\n      });\n\n    const task = await this.prismaService.task\n      .findFirst({\n        where: {\n          id: parseInt(taskId),\n        },\n      })\n      .catch((e) => {\n        throw new BadRequestException('Wrong task id');\n      });\n\n    this.taskQueue.submitTask(parseInt(taskId), subm.id, task.timeLimit);\n\n    return { submissionId: subm.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nPdfService\n\nPdfService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nPdfService->TaskModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTaskModule -->\n\nPrismaService->TaskModule\n\n\n\n\n\nTaskQueueService\n\nTaskQueueService\n\nTaskModule -->\n\nTaskQueueService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PdfService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TaskQueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                        \n                            SubmissionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskController } from './task/task.controller';\nimport { TaskQueueService } from './task-queue/task-queue.service';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { SubmissionsController } from './submissions/submissions.controller';\nimport { PdfService } from './submissions/pdf/pdf.service';\n\n@Module({\n  controllers: [TaskController, SubmissionsController],\n  providers: [TaskQueueService, PrismaService, PdfService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskQueueService.html":{"url":"injectables/TaskQueueService.html","title":"injectable - TaskQueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskQueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task-queue/task-queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                connection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleDestroy\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                submitTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task-queue/task-queue.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task-queue/task-queue.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitTask\n                        \n                    \n                \n            \n            \n                \nsubmitTask(taskId: number, submissionId: number, timeLimit: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task-queue/task-queue.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submissionId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    timeLimit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/task/task-queue/task-queue.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        connection\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/task/task-queue/task-queue.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport * as amqp from 'amqplib/callback_api';\n\nconst QUEUE_NAME = 'task_submission';\n\n@Injectable()\nexport class TaskQueueService implements OnModuleInit, OnModuleDestroy {\n  private channel;\n  private connection;\n\n  onModuleInit(): void {\n    // create new MQTT queue\n    amqp.connect(\n      `amqp://${process.env.MQTT_USER}:${process.env.MQTT_PASS}@${process.env.MQTT_HOST}:${process.env.MQTT_PORT}/`,\n      (error0, connection) => {\n        if (error0) {\n          throw error0;\n        }\n\n        this.connection = connection;\n\n        // create communication channel\n        connection.createChannel((error1, channel) => {\n          if (error1) {\n            throw error1;\n          }\n\n          channel.assertQueue(QUEUE_NAME, {\n            durable: false,\n          });\n\n          this.channel = channel;\n        });\n      },\n    );\n  }\n\n  onModuleDestroy(): void {\n    this.connection.close();\n  }\n\n  //registerQueues() {}\n\n  submitTask(taskId: number, submissionId: number, timeLimit: number): boolean {\n    try {\n      this.channel.sendToQueue(\n        QUEUE_NAME,\n        Buffer.from(\n          JSON.stringify({\n            taskId,\n            submissionId,\n            timeLimit,\n          }),\n        ),\n      );\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppModule } from 'src/app.module';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService, PrismaService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                auth\n                            \n                            \n                                calculatePass\n                            \n                            \n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        auth\n                        \n                    \n                \n            \n            \n                \n                    \n                    auth(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        calculatePass\n                        \n                    \n                \n            \n            \n                \ncalculatePass(pass: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(username: string, password: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as sha256 from 'crypto-js/sha256';\nimport * as uniqid from 'uniqid';\n\nexport type SafeUser = {\n  username: string;\n  email: string;\n  id: number;\n};\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  calculatePass(pass: string, salt: string): string {\n    return sha256(pass + salt).toString();\n  }\n\n  async auth(email: string, pass: string): Promise {\n    const user = await this.prismaService.user.findFirst({\n      where: {\n        email: email,\n      },\n    });\n    if (!user) return undefined;\n\n    const safeUser: SafeUser = {\n      username: user.username,\n      email: user.email,\n      id: user.id,\n    };\n    return user.pass == this.calculatePass(pass, user.salt)\n      ? safeUser\n      : undefined;\n  }\n\n  async createUser(\n    username: string,\n    password: string,\n    email: string,\n  ): Promise {\n    const salt: string = uniqid.process().toString();\n    var cUser = null;\n    if (\n      await this.prismaService.user.findFirst({\n        where: {\n          OR: [{ email: email }, { username: username }],\n        },\n      })\n    ) {\n      return null;\n    }\n    const user = await this.prismaService.user.create({\n      data: {\n        username: username,\n        email: email,\n        pass: this.calculatePass(password, salt),\n        salt: salt,\n      },\n    });\n\n    if (user)\n      return { username: user.username, email: user.email, id: user.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/login/login.controller.ts\n            \n            controller\n            LoginController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/task/submissions/pdf/pdf.service.ts\n            \n            injectable\n            PdfService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/task/submissions/submissions.controller.ts\n            \n            controller\n            SubmissionsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/task/task-queue/task-queue.service.ts\n            \n            injectable\n            TaskQueueService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/task/task-queue/task-queue.service.ts\n            \n            variable\n            QUEUE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @prisma/client : ^4.0.0\n        \n            amqplib : ^0.10.0\n        \n            crypto-js : ^4.1.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pdfkit : ^0.13.0\n        \n            pdfkit-table : ^0.1.99\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uniqid : ^5.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nTaskModule -->\n\nPrismaService->TaskModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nPdfService\n\nPdfService\n\nTaskModule -->\n\nPdfService->TaskModule\n\n\n\n\n\nTaskQueueService\n\nTaskQueueService\n\nTaskModule -->\n\nTaskQueueService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SafeUser   (src/.../users.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/users.service.ts\n    \n    \n        \n            \n                \n                    \n                    SafeUser\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            QUEUE_NAME   (src/.../task-queue.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'devmode', //randomUUID().toString(),\n}\n                    \n                \n\n\n        \n    \n\n    src/task/task-queue/task-queue.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        QUEUE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'task_submission'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
